// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addPaymentParticipant = `-- name: AddPaymentParticipant :exec
INSERT INTO
    payment_participants (payment_id, user_id)
VALUES
    ($1, $2)
`

type AddPaymentParticipantParams struct {
	PaymentID uuid.UUID `json:"payment_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) AddPaymentParticipant(ctx context.Context, arg AddPaymentParticipantParams) error {
	_, err := q.db.Exec(ctx, addPaymentParticipant, arg.PaymentID, arg.UserID)
	return err
}

const createPayment = `-- name: CreatePayment :one
INSERT INTO
    payments (id, session_id, payer_id, amount, description)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING
    id, session_id, payer_id, amount, description, created_at, updated_at
`

type CreatePaymentParams struct {
	ID          uuid.UUID      `json:"id"`
	SessionID   uuid.UUID      `json:"session_id"`
	PayerID     uuid.UUID      `json:"payer_id"`
	Amount      pgtype.Numeric `json:"amount"`
	Description pgtype.Text    `json:"description"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.ID,
		arg.SessionID,
		arg.PayerID,
		arg.Amount,
		arg.Description,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.PayerID,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPaymentsForSession = `-- name: ListPaymentsForSession :many
SELECT
    id, session_id, payer_id, amount, description, created_at, updated_at
FROM
    payments
WHERE
    session_id = $1
ORDER BY
    created_at
`

func (q *Queries) ListPaymentsForSession(ctx context.Context, sessionID uuid.UUID) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPaymentsForSession, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.PayerID,
			&i.Amount,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

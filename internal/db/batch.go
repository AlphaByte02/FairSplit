// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/shopspring/decimal"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const saveFinalBalance = `-- name: SaveFinalBalance :batchone
INSERT INTO
    final_balances (id, session_id, creditor_id, debtor_id, amount)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING
    id, session_id, creditor_id, debtor_id, amount, is_paid, created_at, updated_at
`

type SaveFinalBalanceBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type SaveFinalBalanceParams struct {
	ID         uuid.UUID       `json:"id"`
	SessionID  uuid.UUID       `json:"session_id"`
	CreditorID uuid.UUID       `json:"creditor_id"`
	DebtorID   uuid.UUID       `json:"debtor_id"`
	Amount     decimal.Decimal `json:"amount"`
}

func (q *Queries) SaveFinalBalance(ctx context.Context, arg []SaveFinalBalanceParams) *SaveFinalBalanceBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ID,
			a.SessionID,
			a.CreditorID,
			a.DebtorID,
			a.Amount,
		}
		batch.Queue(saveFinalBalance, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &SaveFinalBalanceBatchResults{br, len(arg), false}
}

func (b *SaveFinalBalanceBatchResults) QueryRow(f func(int, FinalBalance, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var i FinalBalance
		if b.closed {
			if f != nil {
				f(t, i, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(
			&i.ID,
			&i.SessionID,
			&i.CreditorID,
			&i.DebtorID,
			&i.Amount,
			&i.IsPaid,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if f != nil {
			f(t, i, err)
		}
	}
}

func (b *SaveFinalBalanceBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

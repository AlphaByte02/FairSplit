// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/AlphaByte02/FairSplit/internal/types"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addTransactionParticipant = `-- name: AddTransactionParticipant :exec
INSERT INTO
    transaction_participants (transaction_id, user_id)
VALUES
    ($1, $2)
`

type AddTransactionParticipantParams struct {
	TransactionID uuid.UUID `json:"transaction_id"`
	UserID        uuid.UUID `json:"user_id"`
}

func (q *Queries) AddTransactionParticipant(ctx context.Context, arg AddTransactionParticipantParams) error {
	_, err := q.db.Exec(ctx, addTransactionParticipant, arg.TransactionID, arg.UserID)
	return err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO
    transactions (id, session_id, payer_id, amount, description)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING
    id, session_id, payer_id, amount, description, created_at, updated_at
`

type CreateTransactionParams struct {
	ID          uuid.UUID     `json:"id"`
	SessionID   uuid.UUID     `json:"session_id"`
	PayerID     uuid.UUID     `json:"payer_id"`
	Amount      types.Numeric `json:"amount"`
	Description types.Text    `json:"description"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ID,
		arg.SessionID,
		arg.PayerID,
		arg.Amount,
		arg.Description,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.PayerID,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT
    /* sql-formatter-disable */
    t.id, t.session_id, t.payer_id, t.amount, t.description, t.created_at, t.updated_at,
    s.id, s.created_by_id, s.name, s.is_closed, s.created_at, s.updated_at
    /* sql-formatter-enable */
FROM
    transactions t
    JOIN sessions s ON s.id = t.session_id
ORDER BY
    t.created_at DESC
`

type ListTransactionsRow struct {
	Transaction Transaction `json:"transaction"`
	Session     Session     `json:"session"`
}

func (q *Queries) ListTransactions(ctx context.Context) ([]ListTransactionsRow, error) {
	rows, err := q.db.Query(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTransactionsRow
	for rows.Next() {
		var i ListTransactionsRow
		if err := rows.Scan(
			&i.Transaction.ID,
			&i.Transaction.SessionID,
			&i.Transaction.PayerID,
			&i.Transaction.Amount,
			&i.Transaction.Description,
			&i.Transaction.CreatedAt,
			&i.Transaction.UpdatedAt,
			&i.Session.ID,
			&i.Session.CreatedByID,
			&i.Session.Name,
			&i.Session.IsClosed,
			&i.Session.CreatedAt,
			&i.Session.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsBySession = `-- name: ListTransactionsBySession :many
SELECT
    t.id, t.session_id, t.payer_id, t.amount, t.description, t.created_at, t.updated_at,
    /* sql-formatter-disable */
    payer.id, payer.username, payer.created_at, payer.updated_at
    /* sql-formatter-enable */
FROM
    transactions t
    JOIN users AS payer ON payer.id = t.payer_id
WHERE
    t.session_id = $1
ORDER BY
    t.created_at DESC
`

type ListTransactionsBySessionRow struct {
	ID          uuid.UUID          `json:"id"`
	SessionID   uuid.UUID          `json:"session_id"`
	PayerID     uuid.UUID          `json:"payer_id"`
	Amount      types.Numeric      `json:"amount"`
	Description types.Text         `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	User        User               `json:"user"`
}

func (q *Queries) ListTransactionsBySession(ctx context.Context, sessionID uuid.UUID) ([]ListTransactionsBySessionRow, error) {
	rows, err := q.db.Query(ctx, listTransactionsBySession, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTransactionsBySessionRow
	for rows.Next() {
		var i ListTransactionsBySessionRow
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.PayerID,
			&i.Amount,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.User.ID,
			&i.User.Username,
			&i.User.CreatedAt,
			&i.User.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/AlphaByte02/FairSplit/internal/types"
	"github.com/google/uuid"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            users
        WHERE
            LOWER(username) = LOWER($1)
    )
`

func (q *Queries) CheckUserExists(ctx context.Context, lower string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExists, lower)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (id, email, username, picture)
VALUES
    ($1, $2, $3, $4)
RETURNING
    id, email, username, picture, paypal_username, iban, created_at, updated_at
`

type CreateUserParams struct {
	ID       uuid.UUID  `json:"id"`
	Email    string     `json:"email"`
	Username types.Text `json:"username"`
	Picture  types.Text `json:"picture"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Picture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Picture,
		&i.PaypalUsername,
		&i.Iban,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE
    id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    id, email, username, picture, paypal_username, iban, created_at, updated_at
FROM
    users
WHERE
    id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Picture,
		&i.PaypalUsername,
		&i.Iban,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id, email, username, picture, paypal_username, iban, created_at, updated_at
FROM
    users
WHERE
    email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Picture,
		&i.PaypalUsername,
		&i.Iban,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmailOrUsername = `-- name: GetUserByEmailOrUsername :one
SELECT
    id, email, username, picture, paypal_username, iban, created_at, updated_at
FROM
    users
WHERE
    email = $1
    OR LOWER(username) = LOWER($1)
`

func (q *Queries) GetUserByEmailOrUsername(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmailOrUsername, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Picture,
		&i.PaypalUsername,
		&i.Iban,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    id, email, username, picture, paypal_username, iban, created_at, updated_at
FROM
    users
WHERE
    LOWER(username) = LOWER($1)
`

func (q *Queries) GetUserByUsername(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Picture,
		&i.PaypalUsername,
		&i.Iban,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    username = $2,
    paypal_username = $3,
    iban = $4
WHERE
    id = $1
`

type UpdateUserParams struct {
	ID             uuid.UUID             `json:"id"`
	Username       types.Text            `json:"username"`
	PaypalUsername types.Text            `json:"paypal_username"`
	Iban           types.EncryptedString `json:"iban"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.PaypalUsername,
		arg.Iban,
	)
	return err
}

const updateUserPicture = `-- name: UpdateUserPicture :exec
UPDATE users
SET
    picture = $2
WHERE
    id = $1
`

type UpdateUserPictureParams struct {
	ID      uuid.UUID  `json:"id"`
	Picture types.Text `json:"picture"`
}

func (q *Queries) UpdateUserPicture(ctx context.Context, arg UpdateUserPictureParams) error {
	_, err := q.db.Exec(ctx, updateUserPicture, arg.ID, arg.Picture)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addSessionParticipant = `-- name: AddSessionParticipant :exec
INSERT INTO
    session_participants (session_id, user_id)
VALUES
    ($1, $2)
`

type AddSessionParticipantParams struct {
	SessionID uuid.UUID `json:"session_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) AddSessionParticipant(ctx context.Context, arg AddSessionParticipantParams) error {
	_, err := q.db.Exec(ctx, addSessionParticipant, arg.SessionID, arg.UserID)
	return err
}

const checkSessionAccess = `-- name: CheckSessionAccess :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            session_participants
        WHERE
            session_id = $1
            AND user_id = $2
    ) AS has_access
`

type CheckSessionAccessParams struct {
	SessionID uuid.UUID `json:"session_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) CheckSessionAccess(ctx context.Context, arg CheckSessionAccessParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkSessionAccess, arg.SessionID, arg.UserID)
	var has_access bool
	err := row.Scan(&has_access)
	return has_access, err
}

const closeSession = `-- name: CloseSession :exec
UPDATE sessions
SET
    is_closed = TRUE
WHERE
    id = $1
`

func (q *Queries) CloseSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, closeSession, id)
	return err
}

const createSession = `-- name: CreateSession :one
INSERT INTO
    sessions (id, created_by_id, name)
VALUES
    ($1, $2, $3)
RETURNING
    id, created_by_id, name, is_closed, created_at, updated_at
`

type CreateSessionParams struct {
	ID          uuid.UUID `json:"id"`
	CreatedByID uuid.UUID `json:"created_by_id"`
	Name        string    `json:"name"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.ID, arg.CreatedByID, arg.Name)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CreatedByID,
		&i.Name,
		&i.IsClosed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE
    id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteSessionParticipant = `-- name: DeleteSessionParticipant :exec
DELETE FROM session_participants
WHERE
    user_id = $1
`

func (q *Queries) DeleteSessionParticipant(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSessionParticipant, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT
    /* sql-formatter-disable */
    s.id, s.created_by_id, s.name, s.is_closed, s.created_at, s.updated_at,
    u.id, u.username, u.created_at, u.updated_at
    /* sql-formatter-enable */
FROM
    sessions s
    JOIN users u ON u.id = s.created_by_id
WHERE
    s.id = $1
`

type GetSessionRow struct {
	Session Session `json:"session"`
	User    User    `json:"user"`
}

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (GetSessionRow, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i GetSessionRow
	err := row.Scan(
		&i.Session.ID,
		&i.Session.CreatedByID,
		&i.Session.Name,
		&i.Session.IsClosed,
		&i.Session.CreatedAt,
		&i.Session.UpdatedAt,
		&i.User.ID,
		&i.User.Username,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
	)
	return i, err
}

const listSessionParticipants = `-- name: ListSessionParticipants :many
SELECT
    u.id, u.username, u.created_at, u.updated_at
FROM
    session_participants sp
    JOIN users u ON u.id = sp.user_id
WHERE
    session_id = $1
ORDER BY
    u.username
`

func (q *Queries) ListSessionParticipants(ctx context.Context, sessionID uuid.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, listSessionParticipants, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionsForUser = `-- name: ListSessionsForUser :many
SELECT
    s.id, s.created_by_id, s.name, s.is_closed, s.created_at, s.updated_at
FROM
    sessions s
    JOIN session_participants sp ON s.id = sp.session_id
WHERE
    sp.user_id = $1
`

func (q *Queries) ListSessionsForUser(ctx context.Context, userID uuid.UUID) ([]Session, error) {
	rows, err := q.db.Query(ctx, listSessionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.CreatedByID,
			&i.Name,
			&i.IsClosed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

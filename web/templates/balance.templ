package views

import (
	"fmt"

	"github.com/AlphaByte02/FairSplit/internal/db"
	"github.com/AlphaByte02/FairSplit/internal/types"
)

type IntermediateBalanceTransaction struct {
	Transaction db.Transaction
	Payer       db.User
	Amount      types.Numeric
}

type IntermediateBalanceParticipant struct {
	Debtor       db.User
	Transactions []IntermediateBalanceTransaction
	Sum          types.Numeric
}

templ IntermediateBalance(session db.Session, participants []IntermediateBalanceParticipant) {
	<div class="flex sm:justify-around items-center mb-2">
		<div class="flex space-x-3">
			<button
				hx-get={ "/sessions/" + session.ID.String() + "?onlyBody=true" }
				hx-target="#session-body"
				hx-swap="innerHTML"
				class="px-4 py-2 rounded-xl bg-orange-500/20 border border-orange-500/40 text-orange-200 hover:bg-orange-500/30 transition shadow-md backdrop-blur"
			>
				Transazioni
			</button>
			<button
				hx-get={ "/sessions/" + session.ID.String() + "/balances/final" }
				hx-target="#session-body"
				hx-swap="innerHTML"
				class="px-4 py-2 rounded-xl bg-gray-800/60 border border-gray-700 text-gray-200 hover:bg-gray-700/70 transition shadow-md backdrop-blur"
			>
				Conti finali
			</button>
		</div>
	</div>
	if len(participants) == 0 {
		<p class="text-gray-400">Nessun debito da regolare ðŸŽ‰</p>
	}
	<div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
		for _, p := range participants {
			<div class="bg-gray-800/60 border border-gray-700 rounded-2xl shadow-md p-5 flex flex-col">
				<!-- Titolo -->
				<h3 class="text-lg font-semibold text-gray-100 mb-4">{ p.Debtor.Username.String }</h3>
				<!-- Lista transazioni -->
				<div class="flex-1 space-y-3">
					for _, tr := range p.Transactions {
						<div class="bg-gray-900/50 rounded-lg p-3 border border-gray-700">
							<div class="flex justify-between items-center">
								<span class="text-sm text-gray-300">
									<span>{ tr.Payer.Username.String }</span> â€¢ { tr.Transaction.Description.String }
								</span>
								<span class="font-semibold tracking-wide">
									{ fmt.Sprintf("â‚¬%s", tr.Amount) }
								</span>
							</div>
						</div>
					}
				</div>
				<!-- Totale -->
				<div class="border-t border-gray-700 mt-4 pt-3 flex justify-between items-center">
					<span class="text-gray-400 text-sm">Totale dovuto</span>
					<span class="font-bold text-lg tracking-wide">
						{ fmt.Sprintf("â‚¬%s", p.Sum) }
					</span>
				</div>
			</div>
		}
	</div>
}

type BalanceTransferItem struct {
	From   db.User
	To     db.User
	Amount float64
}

templ FinalBalance(session db.Session, transfers []BalanceTransferItem) {
	<div class="flex sm:justify-around items-center mb-2">
		<div class="flex space-x-3">
			<button
				hx-get={ "/sessions/" + session.ID.String() + "?onlyBody=true" }
				hx-target="#session-body"
				hx-swap="innerHTML"
				class="px-4 py-2 rounded-xl bg-orange-500/20 border border-orange-500/40 text-orange-200 hover:bg-orange-500/30 transition shadow-md backdrop-blur"
			>
				Transazioni
			</button>
			<button
				hx-get={ "/sessions/" + session.ID.String() + "/balances/intermediate" }
				hx-target="#session-body"
				hx-swap="innerHTML"
				class="px-4 py-2 rounded-xl bg-gray-800/60 border border-gray-700 text-gray-200 hover:bg-gray-700/70 transition shadow-md backdrop-blur"
			>
				Conti intermedi
			</button>
		</div>
	</div>
	<div class="space-y-4 mb-4">
		if len(transfers) == 0 {
			<p class="text-gray-400">Nessun debito da regolare ðŸŽ‰</p>
		} else {
			for _, tr := range transfers {
				<div x-data="{ expanded: false }" @click="expanded = !expanded" class="bg-gray-800/60 border border-gray-700 rounded-xl p-4 shadow-md">
					<div class="flex items-center justify-between">
						<div>
							<span class="text-gray-200 font-medium">{ tr.From.Username.String }</span>
							<span class="text-gray-400">deve a </span>
							<span class="text-gray-200 font-medium">{ tr.To.Username.String }</span>
						</div>
						<span class="text-emerald-400 font-bold text-lg tracking-wide">â‚¬{ fmt.Sprintf("%.02f", tr.Amount) }</span>
					</div>
					<div x-show="expanded" x-transition>
						<hr class="h-px mt-2 mb-3 bg-gray-200 border-0 dark:bg-gray-700"/>
						<div class="flex items-center justify-center space-x-4">
							if tr.To.Iban != "" {
								<button
									x-data={ fmt.Sprintf("{ copied: false, iban: '%s'}", tr.To.Iban) }
									@click.stop
									@click="navigator.clipboard.writeText(iban); copied = true; setTimeout(() => copied = false, 2000)"
									class="flex items-center justify-center gap-2 px-5 py-3
									rounded-xl bg-slate-800/70 backdrop-blur-md border border-slate-700/50
									hover:bg-slate-700/70 hover:border-green-500/50 hover:shadow-lg hover:shadow-green-500/20
									transition-all duration-200 text-white font-medium"
								>
									<!-- Icona Copy -->
									<svg
										xmlns="http://www.w3.org/2000/svg"
										fill="none"
										viewBox="0 0 24 24"
										stroke-width="1.5"
										stroke="currentColor"
										class="w-5 h-5"
									>
										<path
											stroke-linecap="round"
											stroke-linejoin="round"
											d="M8 16.5h8m-8-4h8m-8-4h4M3 7.5a2.25 2.25 0 012.25-2.25h9L18 7.5v9A2.25 2.25 0 0115.75 18H5.25A2.25 2.25 0 013 15.75v-8.25zM18 7.5V18a2.25 2.25 0 002.25-2.25V9.75A2.25 2.25 0 0018 7.5z"
										></path>
									</svg>
									<span x-show="!copied">Copy IBAN</span>
									<span x-show="copied" class="text-green-400">Copied!</span>
								</button>
							}
							if tr.To.PaypalUsername.String != "" {
								<a
									href={ fmt.Sprintf("https://paypal.me/%s", tr.To.PaypalUsername.String) }
									target="_blank"
								>
									<button
										@click.stop
										class="flex items-center justify-center gap-2 px-5 py-3
										rounded-xl bg-slate-800/70 backdrop-blur-md border border-slate-700/50
										hover:bg-slate-700/70 hover:border-blue-500/50 hover:shadow-lg hover:shadow-blue-500/20
										transition-all duration-200 text-white font-medium"
									>
										<!-- Icona PayPal -->
										<svg
											xmlns="http://www.w3.org/2000/svg"
											viewBox="0 0 24 24"
											fill="currentColor"
											class="w-5 h-5 text-[#009cde]"
										>
											<path d="M7.5 21H5.2c-.6 0-1-.5-.9-1.1l1.9-12.3c.1-.5.5-.9 1-.9h6.5c2.5 0 4.4.5 5.6 1.6 1.2 1 1.7 2.6 1.3 4.8-.6 3.7-2.8 5.6-6.5 5.6h-1.6l-.5 3.2c-.1.6-.6 1.1-1.2 1.1H7.5z"></path>
										</svg>
										<span>Pay with PayPal</span>
									</button>
								</a>
							}
							if tr.To.PaypalUsername.String == "" && tr.To.Iban == "" {
								<div class="flex items-center space-x-2"><span class="italic font-medium text-gray-400">No info</span></div>
							}
						</div>
					</div>
				</div>
			}
		}
	</div>
	<div class="flex justify-around items-center">
		if GetUser(ctx).ID == session.CreatedByID && !session.IsClosed {
			<form hx-post={ "/sessions/" + session.ID.String() + "/close" } hx-swap="outerHTML">
				<button
					type="submit"
					class="px-4 py-2 rounded-lg bg-red-500/20 border border-red-500/40 text-red-200 hover:bg-red-500/30"
				>
					Chiudi sessione
				</button>
			</form>
		}
	</div>
}

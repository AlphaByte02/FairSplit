package views

import (
	"fmt"
	"github.com/AlphaByte02/FairSplit/internal/db"
	"github.com/shopspring/decimal"
	"slices"
)

templ Sessions(sessions []db.Session) {
	<div id="sessions-list" class="divide-y divide-white/6">
		<div x-show="numSessions == 0" class="py-6 text-center text-slate-400">Non hai ancora creato nessuna sessione.</div>
		for _, s := range sessions {
			@SessionItem(s)
		}
	</div>
}

templ SessionItem(session db.Session) {
	<a
		href={ "/sessions/" + session.ID.String() }
		class="mb-1 block rounded-2xl p-5 bg-black/40 backdrop-blur-sm border border-white/5
          hover:bg-black/60 hover:border-blue-500/30 hover:shadow-lg hover:shadow-blue-500/10
          transition-all duration-200 group"
	>
		<div class="flex items-center justify-between">
			<div>
				<h2 class="text-lg font-semibold text-white group-hover:text-blue-400 transition">
					{ session.Name }
					if session.IsClosed {
						ðŸ”’
					}
				</h2>
				<p class="text-sm text-gray-400">
					Aperta il { session.CreatedAt.Time.Format("02 Jan 2006") }
				</p>
			</div>
			<!-- Icona freccia -->
			<svg
				xmlns="http://www.w3.org/2000/svg"
				class="w-6 h-6 text-gray-400 group-hover:text-blue-400 transition-transform group-hover:translate-x-1"
				fill="none"
				viewBox="0 0 24 24"
				stroke="currentColor"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M9 5l7 7-7 7"
				></path>
			</svg>
		</div>
	</a>
}

templ PartecipantsCount(count int) {
	<p id="participants-count" hx-swap-oob="true" class="text-sm text-gray-400 ">
		<span class="cursor-pointer hover:text-gray-300 transition" @click="openParticipantsModal = true">{ count } partecipanti</span>
	</p>
}

templ PartecipantsModal(session db.Session, participants []db.User) {
	<div
		x-show="openParticipantsModal"
		@click.self="openParticipantsModal = false"
		class="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm"
		x-cloak
	>
		<div class="bg-gray-900/70 border border-gray-700 rounded-2xl shadow-xl w-full max-w-md p-6 relative">
			<h2 class="text-lg font-semibold text-white mb-4">Partecipanti</h2>
			@PartecipantsModalList(session, participants)
			<div class="flex justify-end mt-4">
				<button
					@click="openParticipantsModal = false"
					class="px-4 py-2 rounded-lg bg-gray-700/60 border border-gray-600 text-gray-200 hover:bg-gray-600 hover:text-white transition"
				>
					Chiudi
				</button>
			</div>
		</div>
	</div>
}

templ PartecipantsModalList(session db.Session, participants []db.User) {
	<div id="participants-modal-list" hx-swap-oob="true" class="space-y-2 max-h-80 overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-gray-700 scrollbar-track-transparent">
		for i, p := range participants {
			<div id={ fmt.Sprintf("participant-%d", i) } class="flex items-center justify-between bg-gray-800/60 border border-gray-700 rounded-lg px-3 py-2">
				<span class="text-gray-200">{ p.Username.String }</span>
				if GetUser(ctx).ID == session.CreatedByID && p.ID != session.CreatedByID {
					<button
						hx-delete={ "/sessions/" + session.ID.String() + "/kick/" + p.ID.String() }
						hx-target={ fmt.Sprintf("#participant-%d", i) }
						hx-trigger="click"
						hx-swap="outerHTML"
						class="text-red-400 hover:text-red-300 transition bg-gray-800/60"
						title="Rimuovi utente"
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="h-6 w-6"
							viewBox="0 0 24 24"
							fill="none"
							fill-opacity="0"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
						>
							<polyline points="3 6 5 6 21 6"></polyline>
							<path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6"></path>
							<path d="M10 11v6"></path>
							<path d="M14 11v6"></path>
						</svg>
					</button>
				}
			</div>
		}
	</div>
}

templ SessionPage(session db.Session, participants []db.User, transactions []db.ListTransactionsBySessionRow) {
	@Layout("| " + session.Name) {
		@Session(session, participants, transactions)
	}
}

templ SessionHeader(session db.Session, participants []db.User) {
	<div id="session-header" hx-swap-oob="true" class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
		<div x-data={ fmt.Sprintf("{ editing: false, name: '%s' }", session.Name) }>
			<!-- Visualizzazione normale -->
			<h1 x-show="!editing" class="text-2xl font-bold flex items-center space-x-2">
				<span x-text="name"></span>
				if GetUser(ctx).ID == session.CreatedByID {
					<button
						@click="editing = true; $nextTick(() => $refs.input.focus())"
						class="text-gray-400 hover:text-emerald-400 transition bg-transparent"
						title="Rinomina sessione"
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="w-6 h-6"
							fill="none"
							viewBox="0 0 24 24"
							stroke="currentColor"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M15.232 5.232l3.536 3.536M9 11l6.232-6.232a2.121 2.121 0 113 3L12 14l-4 1 1-4z"
							></path>
						</svg>
					</button>
				}
				if session.IsClosed {
					<span x-show="!editing">ðŸ”’</span>
				}
			</h1>
			<!-- Input editabile -->
			if GetUser(ctx).ID == session.CreatedByID {
				<form
					x-show="editing"
					hx-post={ "/sessions/" + session.ID.String() + "/rename" }
					hx-trigger="submit"
					hx-swap="none"
					class="flex items-center space-x-2 transition"
				>
					<input
						x-ref="input"
						x-model="name"
						name="name"
						type="text"
						minlength="3"
						class="bg-gray-900/70 border border-gray-700 rounded-lg px-2 py-1 focus:ring focus:ring-emerald-500 focus:outline-none"
					/>
					<button
						type="submit"
						class="px-2 py-1 rounded-lg bg-emerald-600 text-white hover:bg-emerald-500 text-sm"
					>
						Salva
					</button>
					<button
						type="button"
						@click="editing = false"
						class="px-2 py-1 rounded-lg bg-gray-700 text-gray-300 hover:bg-gray-600 text-sm"
					>
						Annulla
					</button>
				</form>
			}
			@PartecipantsCount(len(participants))
		</div>
		<div class="mt-4 sm:mt-0 flex gap-2">
			if !session.IsClosed {
				<button
					hx-get={ "/sessions/" + session.ID.String() + "/transactions/" }
					hx-trigger="click"
					hx-target="#newTransactionModalContent"
					hx-swap="outerHTML"
					@htmx:after-request="openNewTransactionModal = true"
					class="px-4 py-2 bg-emerald-500/20 border border-emerald-500/40 text-emerald-200 rounded-lg hover:bg-emerald-500/30"
				>
					Nuova transazione
				</button>
				<button
					@click="openInviteModal = true"
					class="px-4 py-2 bg-blue-500/20 border border-blue-500/40 text-blue-200 rounded-lg hover:bg-blue-500/30"
				>
					Invita utente
				</button>
			}
		</div>
	</div>
}

templ Session(session db.Session, participants []db.User, transactions []db.ListTransactionsBySessionRow) {
	<div x-data="{ openNewTransactionModal: false, openInviteModal: false, openParticipantsModal: false}">
		<div class="flex flex-col gap-6 p-6">
			<!-- Header -->
			@SessionHeader(session, participants)
			<!-- Body -->
			@SessionBody(session, transactions)
		</div>
		<!-- Modal Partecipanti -->
		@PartecipantsModal(session, participants)
		<!-- Modal Nuova Transazione -->
		@TransactionModal(session, participants)
		<!-- Modal Invita Utente -->
		<div
			x-show="openInviteModal"
			x-transition
			@click.self="openInviteModal = false"
			class="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
		>
			<div class="bg-gray-900/80 backdrop-blur-md border border-gray-700 rounded-lg p-6 w-full max-w-md">
				<h2 class="text-xl font-bold text-white mb-4">Invita utente</h2>
				<form hx-post={ "/sessions/" + session.ID.String() + "/invite" } hx-target="#newTransactionModalContent" hx-swap="outerHTML" @htmx:after-request="openInviteModal = false; $el.reset()">
					<input type="text" name="username" placeholder="Username" class="w-full mb-3 p-2 rounded bg-gray-800 text-white" required/>
					<div class="flex justify-end gap-2">
						<button type="button" @click="openInviteModal = false" class="px-4 py-2 bg-gray-700 text-gray-300 rounded-lg">Annulla</button>
						<button type="submit" class="px-4 py-2 bg-sky-500/20 border border-sky-500/40 text-sky-200 rounded-lg hover:bg-sky-500/30">Invita</button>
					</div>
				</form>
			</div>
		</div>
	</div>
}

templ SessionBody(session db.Session, transactions []db.ListTransactionsBySessionRow) {
	<div id="session-body">
		if len(transactions) > 0 {
			<div class="flex sm:justify-around items-center mb-2">
				<div class="flex space-x-3">
					<button
						hx-get={ "/sessions/" + session.ID.String() + "/balances/intermediate" }
						hx-target="#session-body"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-xl bg-gray-800/60 border border-gray-700 text-gray-200 hover:bg-gray-700/70 transition shadow-md backdrop-blur"
					>
						Conti intermedi
					</button>
					<button
						hx-get={ "/sessions/" + session.ID.String() + "/balances/final" }
						hx-target="#session-body"
						hx-swap="innerHTML"
						class="px-4 py-2 rounded-xl bg-gray-800/60 border border-gray-700 text-gray-200 hover:bg-gray-700/70 transition shadow-md backdrop-blur"
					>
						Conti finali
					</button>
				</div>
			</div>
		}
		<!-- Lista transazioni -->
		@TransactionList(session, transactions)
	</div>
}

type TransactionModalProps struct {
	Session         db.Session
	AllParticipants []db.User

	Transaction  db.Transaction
	Participants []db.User
	IsEdit       bool
}

templ TransactionModal(session db.Session, participants []db.User) {
	<div
		id="newTransactionModal"
		x-show="openNewTransactionModal"
		x-transition
		@click.self="$refs.txForm.reset(); openNewTransactionModal = false"
		class="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
	>
		@TransactionModalContent(TransactionModalProps{Session: session, AllParticipants: participants, IsEdit: false})
	</div>
}

templ TransactionModalContent(props TransactionModalProps) {
	<div
		id="newTransactionModalContent"
		hx-swap-oob="true"
		class="bg-gray-900/80 backdrop-blur-md border border-gray-700 rounded-lg p-6 w-full max-w-md"
	>
		<h2 class="text-xl font-bold text-white mb-4">
			if props.IsEdit {
				Modifica
			} else {
				Nuova
			}
			transazione
		</h2>
		<form
			x-ref="txForm"
			if props.IsEdit {
				hx-patch={ "/sessions/" + props.Session.ID.String() + "/transactions/" + props.Transaction.ID.String() }
			} else {
				hx-post={ "/sessions/" + props.Session.ID.String() + "/transactions" }
			}
			hx-target="#session-body"
			hx-swap="outerHTML"
			@htmx:after-request="openNewTransactionModal = false; $el.reset()"
		>
			<!-- Pagatore -->
			<div class="flex items-center gap-3 justify-center">
				<div class="relative">
					<select
						id="payer"
						name="payer"
						class="appearance-none px-4 py-2 rounded-xl bg-slate-800/70
							text-slate-200 font-medium border border-slate-700/50
							focus:ring-2 focus:ring-green-500/40 focus:outline-none
							hover:bg-slate-700/70 transition-all duration-200 pr-8"
					>
						for _, u := range props.AllParticipants {
							<option
								value={ u.ID.String() }
								selected?={ (!props.IsEdit && u.ID == GetUser(ctx).ID) || (props.IsEdit && u.ID == props.Transaction.PayerID) }
							>
								{ u.Username.String }
							</option>
						}
					</select>
					<!-- Iconcina dropdown custom -->
					<svg
						class="pointer-events-none absolute right-2 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
						stroke="currentColor"
						stroke-width="2"
					>
						<path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"></path>
					</svg>
				</div>
			</div>
			<!-- Importo -->
			<div class="mb-4">
				<label class="block text-gray-300 mb-1">Importo (â‚¬)</label>
				<input
					type="number"
					name="amount"
					placeholder="0.01"
					min="0.01"
					step="0.01"
					class="w-full rounded-lg border border-gray-700 bg-gray-900/60 text-gray-100 px-3 py-2 focus:ring-2 focus:ring-emerald-500 focus:outline-none no-spinner"
					required
					if props.IsEdit {
						value={ props.Transaction.Amount.String() }
					}
				/>
			</div>
			<!-- Descrizione -->
			<div class="mb-6">
				<label class="block text-gray-300 mb-1">Descrizione</label>
				<input
					type="text"
					name="description"
					placeholder="eg. spesa"
					class="w-full rounded-lg border border-gray-700 bg-gray-900/60 text-gray-100 px-3 py-2 focus:ring-2 focus:ring-emerald-500 focus:outline-none"
					required
					if props.IsEdit {
						value={ props.Transaction.Description.String }
					}
				/>
			</div>
			<!-- Partecipanti  -->
			<div
				class="mb-6"
				x-data={ fmt.Sprintf(`{
						allSelected: %t,
						toggleSelectAll() {
							const checkboxes = this.$root.querySelectorAll('input[name=paid_for]');
							this.allSelected = !this.allSelected;
							checkboxes.forEach(cb => cb.checked = this.allSelected);
						}
					}`, props.IsEdit) }
			>
				<div class="flex items-center justify-between mb-3">
					<span class="text-gray-300">Pagato per:</span>
					<button
						type="button"
						@click="toggleSelectAll"
						class="px-3 py-1 rounded-lg border border-emerald-500/40 text-emerald-300 bg-emerald-500/10 hover:bg-emerald-500/20 transition"
					>
						<span x-text="allSelected ? 'Deseleziona tutti' : 'Seleziona tutti'"></span>
					</button>
				</div>
				<div class="grid grid-cols-2 sm:grid-cols-3 gap-2">
					for _, p := range props.AllParticipants {
						<label class="flex items-center gap-2 bg-gray-800/60 backdrop-blur-md p-2 rounded-lg border border-gray-700 text-gray-200 cursor-pointer hover:bg-gray-800/80 transition">
							<input
								type="checkbox"
								name="paid_for"
								value={ p.ID.String() }
								class="accent-emerald-500"
								checked?={ slices.Contains(props.Participants, p) }
							/>
							<span>{ p.Username.String }</span>
						</label>
					}
				</div>
			</div>
			<!-- Bottoni -->
			<div class="flex justify-between mt-5">
				if props.IsEdit {
					<button
						hx-delete={ "/sessions/" + props.Session.ID.String() + "/transactions/" + props.Transaction.ID.String() }
						hx-confirm="Sei sicuro di voler eliminare questa transazione?"
						hx-target="#session-body"
						type="button"
						@click="openNewTransactionModal = false"
						class="px-3 py-2 rounded-lg bg-red-600/80 hover:bg-red-600 text-white shadow transition"
					>
						Elimina
					</button>
				}
				<div class="flex flex-auto justify-end gap-2">
					<button
						type="button"
						@click="openNewTransactionModal = false"
						class="px-3 py-2 rounded-lg bg-slate-600 text-slate-200 hover:bg-slate-500 transition"
					>
						Annulla
					</button>
					<button
						type="submit"
						class="px-3 py-2 rounded-lg bg-emerald-500/80 hover:bg-emerald-500 text-white shadow transition"
					>
						if props.IsEdit {
							Salva
						} else {
							Aggiungi
						}
					</button>
				</div>
			</div>
		</form>
	</div>
}

func getTransactionsTotal(transactions []db.ListTransactionsBySessionRow) decimal.Decimal {
	total := decimal.Zero

	for _, t := range transactions {
		total = total.Add(t.Amount)
	}

	return total
}

templ TransactionList(session db.Session, transactions []db.ListTransactionsBySessionRow) {
	<div id="transactions-list" class="flex flex-col gap-3">
		for _, t := range transactions {
			@TransactionItem(session, t)
		}
		if len(transactions) == 0 {
			<div class="text-gray-500 italic">Ancora nessuna transazione.</div>
		}
		if len(transactions) > 0 {
			<div class="mt-2 p-4 text-right">
				<span class="text-gray-300">Totale:</span>
				<span class="text-emerald-400 font-semibold text-lg tracking-wide">
					â‚¬{ getTransactionsTotal(transactions).String() }
				</span>
			</div>
		}
	</div>
}

templ TransactionItem(session db.Session, transaction db.ListTransactionsBySessionRow) {
	<div class="bg-gray-800/60 border border-gray-700 rounded-xl p-4 flex items-center justify-between hover:bg-gray-800/80 transition">
		<div class="flex flex-col space-y-1">
			<span class="text-gray-200 font-medium">
				if transaction.Description.String != "" {
					{ transaction.Description.String }
				} else {
					{ transaction.ID.String() }
				}
				if !session.IsClosed && GetUser(ctx).ID == transaction.CreatedByID {
					<button
						hx-get={ "/sessions/" + session.ID.String() + "/transactions/" + transaction.ID.String() }
						hx-trigger="click"
						hx-target="#newTransactionModalContent"
						hx-swap="outerHTML"
						@htmx:after-request="openNewTransactionModal = true"
						class="text-gray-400 hover:text-emerald-400 transition bg-transparent"
						title="Edit transaction"
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="w-4 h-4"
							fill="none"
							viewBox="0 0 24 24"
							stroke="currentColor"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M15.232 5.232l3.536 3.536M9 11l6.232-6.232a2.121 2.121 0 113 3L12 14l-4 1 1-4z"
							></path>
						</svg>
					</button>
				}
			</span>
			<span class="text-gray-300 text-sm"><span class="font-medium">{ transaction.User.Username.String }</span> ha pagato</span>
			<div x-data="{ open: false }" class="relative inline-block">
				per
				<span
					@mouseenter="open = true"
					@mouseleave="open = false"
					@click="open = !open"
					class="text-gray-400 text-sm underline cursor-pointer hover:text-gray-300 transition"
				>
					{ len(transaction.Participants) } partecipanti
				</span> â€¢ { transaction.CreatedAt.Time.Format("02/01/2006 15:04") }
				<!-- Tooltip -->
				<div
					x-show="open"
					x-transition
					class="absolute z-50 mt-1 w-max max-w-xs bg-gray-900/90 border border-gray-700 rounded-lg p-3 text-gray-200 text-sm shadow-lg"
				>
					<ul class="space-y-1">
						for _, u := range transaction.Participants {
							<li>{ u }</li>
						}
					</ul>
				</div>
			</div>
		</div>
		<div class="text-right">
			<span class="text-emerald-400 text-xl font-bold tracking-wide">
				{ fmt.Sprintf("â‚¬%s", transaction.Amount) }
			</span>
		</div>
	</div>
}

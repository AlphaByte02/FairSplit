package views

import (
	"context"
	"fmt"
	"github.com/AlphaByte02/FairSplit/internal/db"
	"time"
)

func GetUser(ctx context.Context) db.User {
	if user, ok := ctx.Value("user").(db.User); ok {
		return user
	}
	return db.User{}
}

func GetUsername(user db.User) string {
	if user.Email == "" {
		return ""
	}

	if user.Username.String == "" {
		return user.Email
	}

	return user.Username.String
}

func isProd(ctx context.Context) bool {
	if isProd, ok := ctx.Value("isProd").(bool); ok {
		return isProd
	}
	return false
}

templ Layout(title string) {
	<!DOCTYPE html>
	<html class="dark">
		<head>
			<meta charset="utf-8"/>
			<meta http-equiv="x-ua-compatible" content="IE=edge; chrome=1"/>
			<meta name="viewport" content="width=device-width,initial-scale=1"/>
			<title>FairSplit { title }</title>
			<meta property="og:title" content={ "FairSplit " + title }/>
			<meta property="og:site_name" content="FairSplit"/>
			<meta property="og:description" content="Split the bill, fair, simply"/>
			<meta name="description" content="Split the bill, fair, simply"/>
			<link rel="icon" type="image/x-icon" href="/favicon.png"/>
			<meta property="og:image" content="/favicon.png"/>
			<meta property="og:type" value="website"/>
			<meta property="og:locale" content="it_IT"/>
			if !isProd(ctx) {
				<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@unocss/reset/tailwind-compat.min.css"/>
				<script>
					window.__unocss = {
						preflight: true
					}
				</script>
				<script src="https://cdn.jsdelivr.net/npm/@unocss/runtime"></script>
				<style>
					body[un-cloak] {
						background-color: #1e293b;
					}
					div[un-cloak] {
						display: none;
					}
				</style>
			} else {
				<link rel="stylesheet" href="/static/css/uno.css"/>
			}
			<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			<link rel="stylesheet" href="/static/css/globals.css"/>
		</head>
		<body class="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-950 text-slate-100 antialiased" un-cloak>
			<div class="min-h-screen flex flex-col" un-cloak x-data>
				<header class="bg-transparent backdrop-blur-sm border-b border-white/6">
					<div class="max-w-4xl mx-auto px-4 py-4 flex items-center justify-between">
						<a href="/" class="flex items-center gap-3">
							<div class="w-9 h-9 rounded-xl bg-gradient-to-br from-indigo-500 to-violet-500 grid place-items-center shadow-lg">
								<span class="font-bold">FS</span>
							</div>
							<div>
								<div class="text-lg font-semibold leading-none">FairSplit</div>
								<div class="text-xs text-slate-400 -mt-0.5">Split the bill, fair, simply</div>
							</div>
						</a>
						@UserNav(GetUser(ctx))
					</div>
				</header>
				<main class="flex-1 flex items-center justify-center px-4 py-8">
					<div class="w-full max-w-4xl" id="main-content">
						{ children... }
					</div>
				</main>
				@toast()
				<footer class="text-center text-slate-400 text-sm py-6">
					&copy; { time.Now().Year() } FairSplit ¬∑ Creato con ‚ù§Ô∏è
				</footer>
				<script>
					document.addEventListener("alpine:init", () => {
						document.body.addEventListener("htmx:beforeSwap", (evt) => {
							if (evt.detail.xhr.status === 400) {
								const options = {
									type: "danger",
									message: "Error",
									description: "There was an error",
									position : "top-center",
									html: "",
								}
								try {
									const res = JSON.parse(evt.detail.xhr.response);

									options.type = res.level;
									options.message = res.title;
									options.description = res.message || options.description;
								} catch {}

								window.dispatchEvent(new CustomEvent('toast-show', { detail : options}));
							}
						});
					});
				</script>
			</div>
		</body>
	</html>
}

templ UserNav(user db.User) {
	{{ username := GetUsername(user) }}
	<nav id="user-nav" hx-swap-oob="true" class="flex items-center">
		if username == "" {
			<a href="/login" class="px-3 py-1 rounded-md hover:bg-white/6 transition">Accedi</a>
		} else {
			<div class="flex items-center gap-4">
				<a href="/user">
					<span class="text-slate-200 font-medium hidden sm:inline">{ username }</span>
				</a>
				if user.Picture.String != "" {
					<a href="/user">
						<div class="relative">
							<img
								src={ user.Picture.String }
								alt="profile"
								class="w-9 h-9 rounded-full border border-slate-700 shadow-sm object-cover
                            hover:scale-105 hover:shadow-lg transition-all duration-200"
							/>
						</div>
					</a>
				}
				<div class="h-9 w-px self-stretch bg-gradient-to-tr from-transparent via-neutral-500 to-transparent opacity-25 dark:via-neutral-400"></div>
				<a href="/logout" class="px-3 py-1 rounded-md hover:bg-white/6 transition">Esci</a>
			</div>
		}
	</nav>
}

templ Dashboard(sessions []db.Session) {
	@Layout("- Dashboard") {
		<div x-data={ fmt.Sprintf("{ openNewSessionModal: false, numSessions: %d }", len(sessions)) } class="space-y-6 fade-in">
			<!-- Card utente -->
			<div class="bg-white/4 border border-white/8 backdrop-blur-md rounded-xl p-6 shadow-lg">
				<h1 class="text-2xl font-semibold">Ciao <b>{ GetUsername(GetUser(ctx)) }</b>üëã</h1>
				<p class="text-slate-300 mt-1">Ecco tutte le tue sessioni.</p>
			</div>
			<!-- Lista sessioni -->
			<div class="bg-white/4 border border-white/8 backdrop-blur-md rounded-xl p-6 shadow-lg">
				<div class="flex items-center justify-between mb-4">
					<h2 class="text-lg font-semibold">Sessioni</h2>
					<button
						class="px-4 py-2 rounded-lg bg-emerald-500 hover:bg-emerald-600 text-white font-medium transition"
						@click="openNewSessionModal = true"
					>
						Nuova sessione
					</button>
				</div>
				@Sessions(sessions)
			</div>
			<!-- Modal -->
			<div
				x-show="openNewSessionModal"
				x-transition.opacity
				class="fixed inset-0 bg-black/60 backdrop-blur-sm z-40"
				@click="openNewSessionModal = false"
			></div>
			<div
				x-show="openNewSessionModal"
				x-transition
				class="fixed inset-0 flex items-center justify-center z-50 p-4"
			>
				<div
					class="bg-white/10 backdrop-blur-md border border-white/10 rounded-xl shadow-xl w-full max-w-md p-6"
					@click.stop
				>
					<h3 class="text-xl font-semibold mb-4">Crea una nuova sessione</h3>
					<form
						hx-post="/sessions/new"
						hx-target="#sessions-list"
						hx-swap="afterbegin"
						@htmx:after-request="openNewSessionModal = false; if ($event.detail.successful) { numSessions++ }"
						class="space-y-4"
					>
						<div>
							<label class="block text-sm text-slate-300 mb-1">Nome sessione</label>
							<input
								type="text"
								name="name"
								required
								class="w-full rounded-lg bg-white/5 border border-white/10 px-3 py-2 text-white placeholder-slate-400 focus:(outline-none ring-2 ring-emerald-500)"
								placeholder="Es. Vacanza"
								minlength="3"
							/>
						</div>
						<div class="flex justify-end gap-2">
							<button
								type="button"
								class="px-4 py-2 rounded-lg bg-white/10 hover:bg-white/20 text-slate-200"
								@click="openNewSessionModal = false"
							>
								Annulla
							</button>
							<button
								type="submit"
								class="px-4 py-2 rounded-lg bg-emerald-500 hover:bg-emerald-600 text-white font-medium"
							>
								Crea
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	}
}
